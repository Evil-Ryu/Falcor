



#include "GLSLDefines.slangh"
#include "Randoms.slangh"

// useful reference:  https://www.shadertoy.com/view/4sfGzS


float valueNoise(vec2 p)
{
    vec2 i = floor(p);
    vec2 f = fract(p);

    vec2 u = f * f * (3.0 - 2.0 * f);

    return mix(mix(hash12(i + vec2(0.0, 0.0)),
        hash12(i + vec2(1.0, 0.0)), u.x),
        mix(hash12(i + vec2(0.0, 1.0)),
            hash12(i + vec2(1.0, 1.0)), u.x), u.y);
}

// return gradient noise (in x) and its derivatives (in yz)
vec3 valueNoised(vec2 p)
{
    vec2 i = floor(p);
    vec2 f = fract(p);

#if 1
    // quintic interpolation
    vec2 u = f * f * f * (f * (f * 6.0 - 15.0) + 10.0);
    vec2 du = 30.0 * f * f * (f * (f - 2.0) + 1.0);
#else
    // cubic interpolation
    vec2 u = f * f * (3.0 - 2.0 * f);
    vec2 du = 6.0 * f * (1.0 - f);
#endif    

    vec2 ga = hash22(i + vec2(0.0, 0.0));
    vec2 gb = hash22(i + vec2(1.0, 0.0));
    vec2 gc = hash22(i + vec2(0.0, 1.0));
    vec2 gd = hash22(i + vec2(1.0, 1.0));

    float va = dot(ga, f - vec2(0.0, 0.0));
    float vb = dot(gb, f - vec2(1.0, 0.0));
    float vc = dot(gc, f - vec2(0.0, 1.0));
    float vd = dot(gd, f - vec2(1.0, 1.0));

    return vec3(va + u.x * (vb - va) + u.y * (vc - va) + u.x * u.y * (va - vb - vc + vd),   // value
        ga + u.x * (gb - ga) + u.y * (gc - ga) + u.x * u.y * (ga - gb - gc + gd) +  // derivatives
        du * (u.yx * (va - vb - vc + vd) + vec2(vb, vc) - va));
}


// begin:  gradient noise

vec2 grad(ivec2 z)  // replace this anything that returns a random vector
{
    // 2D to 1D  (feel free to replace by some other)
    int n = z.x + z.y * 11111;

    // Hugo Elias hash (feel free to replace by another one)
    n = (n << 13) ^ n;
    n = (n * (n * n * 15731 + 789221) + 1376312589) >> 16;

#if 0

    // simple random vectors
    return vec2(cos(float(n)), sin(float(n)));

#else

    // Perlin style vectors
    n &= 7;
    vec2 gr = vec2(n & 1, n >> 1) * 2.0 - 1.0;
    return (n >= 6) ? vec2(0.0, gr.x) :
        (n >= 4) ? vec2(gr.x, 0.0) :
        gr;
#endif                              
}
// [-1, 1]
float gradientNoise(vec2 p)
{
    ivec2 i = ivec2(floor(p));
    vec2 f = fract(p);

    vec2 u = f * f * (3.0 - 2.0 * f); // feel free to replace by a quintic smoothstep instead

    return mix(mix(dot(grad(i + ivec2(0, 0)), f - vec2(0.0, 0.0)),
        dot(grad(i + ivec2(1, 0)), f - vec2(1.0, 0.0)), u.x),
        mix(dot(grad(i + ivec2(0, 1)), f - vec2(0.0, 1.0)),
            dot(grad(i + ivec2(1, 1)), f - vec2(1.0, 1.0)), u.x), u.y);
}

// end: gradient noise


// begin: wave noise
vec2 simpleGrad(vec2 n) { return sin(n.x * n.y * vec2(12, 17) + vec2(1, 2)); }
//vec2 simpleGrad( vec2 n ) { return sin(n.x*n.y+vec2(0,1.571)); } // if you want the gradients to lay on a circle

// [-1, 1]
// the main advantage is that it can generate a wromy look, as
// in robobo1221's original shader, by changing the kF constant to be closer to 6
float waveNoise(vec2 p)
{
    const float kF = 2.0;  // make 6 to see worms

    vec2 i = floor(p);
    vec2 f = fract(p);
    f = f * f * (3.0 - 2.0 * f);
    return mix(mix(sin(kF * dot(p, simpleGrad(i + vec2(0, 0)))),
        sin(kF * dot(p, simpleGrad(i + vec2(1, 0)))), f.x),
        mix(sin(kF * dot(p, simpleGrad(i + vec2(0, 1)))),
            sin(kF * dot(p, simpleGrad(i + vec2(1, 1)))), f.x), f.y);
}
// end: wave noise



// begin: compact noise
float noise(vec2 x)
{
    vec2 p = floor(x);
    vec2 f = fract(x);
    f = f * f * (3.0 - 2.0 * f);
    float n = p.x + p.y * 57.0;
    return mix(mix(hash11(n + 0.0), hash11(n + 1.0), f.x),
        mix(hash11(n + 57.0), hash11(n + 58.0), f.x), f.y);
}
// end: compact noise



// begin: simplex noise
// using simplex instead of grid, reduce complexity of perlin noise's O(2^n) to O(n)
// as for dimension n, grid has 2^n vertices, but simplex has only n+1 vertices
// simplex: line for 1d, triangle for 2d, tetrahedron for 3d


vec2 hash(vec2 p) // can't use the better hash from dave for simplex noise
{
    p = vec2(dot(p, vec2(127.1, 311.7)), dot(p, vec2(269.5, 183.3)));
    return -1.0 + 2.0 * fract(sin(p) * 43758.5453123);
}

float simplexNoise2D(vec2 p)
{
    const float K1 = 0.366025404; // (sqrt(3)-1)/2;
    const float K2 = 0.211324865; // (3-sqrt(3))/6;

    vec2  i = floor(p + (p.x + p.y) * K1);
    vec2  a = p - i + (i.x + i.y) * K2;
    float m = step(a.y, a.x);
    vec2  o = vec2(m, 1.0 - m);
    vec2  b = a - o + K2;
    vec2  c = a - 1.0 + 2.0 * K2;
    vec3  h = max(0.5 - vec3(dot(a, a), dot(b, b), dot(c, c)), 0.0);
    vec3  n = h * h * h * h * vec3(dot(a, hash(i + 0.0)), dot(b, hash(i + o)), dot(c, hash(i + 1.0)));
    return dot(n, vec3(70.0));
}

float simplexNoise3D(vec3 p)
{
    const float K1 = 0.333333333;
    const float K2 = 0.166666667;

    vec3 i = floor(p + (p.x + p.y + p.z) * K1);
    vec3 d0 = p - (i - (i.x + i.y + i.z) * K2);

    vec3 e = step(vec3(0.0), d0 - d0.yzx);
    vec3 i1 = e * (1.0 - e.zxy);
    vec3 i2 = 1.0 - e.zxy * (1.0 - e);

    vec3 d1 = d0 - (i1 - 1.0 * K2);
    vec3 d2 = d0 - (i2 - 2.0 * K2);
    vec3 d3 = d0 - (1.0 - 3.0 * K2);

    vec4 h = max(0.6 - vec4(dot(d0, d0), dot(d1, d1), dot(d2, d2), dot(d3, d3)), 0.0);
    vec4 n = h * h * h * h * vec4(dot(d0, hash33(i)), dot(d1, hash33(i + i1)), dot(d2, hash33(i + i2)), dot(d3, hash33(i + 1.0)));

    return dot(vec4(31.316), n);
}
// end: simplex noise


float voronoi(vec2 p)
{
    vec2 n = floor(p);
    vec2 f = fract(p);
    float res = 0.;

    for (int j = -1; j <= 1; ++j)
        for (int i = -1; i <= 1; ++i)
        {
            vec2 c = vec2(i, j);
            vec2 r = c + hash22(n + c) - f;
            float t = length(r);
            res += exp(-32. * t);
        }

    return -1. / 32. * log(res);
}


float fbm(vec2 p)
{
    float f = 0.0;
    mat2 m = mat2(1.6, 1.2, -1.2, 1.6);

    // convert back when in glsl

    /*f = 0.5000 * noise(p); p = m * p;
    f += 0.2500 * noise(p); p = m * p;
    f += 0.1250 * noise(p); p = m * p;
    f += 0.0625 * noise(p); p = m * p;*/

    f = 0.5000 * noise(p); p = mul(p, m);
    f += 0.2500 * noise(p); p = mul(p, m);
    f += 0.1250 * noise(p); p = mul(p, m);
    f += 0.0625 * noise(p); p = mul(p, m);
    return f;
}
