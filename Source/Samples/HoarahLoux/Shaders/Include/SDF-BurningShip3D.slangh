
#pragma once

static bool isJulia = true;
static vec3 juliaC = vec3(-1.81984, -0.006, -0.00684);
static float  bailOut = 2.;


// returns (a+bi) * (c+di)
vec2 complexMul(float a, float b, float c, float d)
{
    return vec2(a * c - b * d, a * d + b * c);
}

vec2 complexMul(vec2 a, vec2 b)
{
    return vec2(a.x * b.x - a.y * b.y, a.x * b.y + a.y * b.x);
}

// returns (a+bi+cj) * (d + ei + fj)
vec3 triplexMul(vec3 a, vec3 b)
{
    a = abs(a); b = abs(b);
    float ra = length(a.xy);
    float rb = length(b.xy);

    vec2 newXY = complexMul(a.xy / ra, b.xy / rb);
    vec2 newRZ = complexMul(vec2(ra, a.z), vec2(rb, b.z));

    newXY = newXY * newRZ.x;

    return vec3(newXY.x, newXY.y, newRZ.y);
}

vec3 triplexPow(vec3 z, float power)
{
    z = abs(z);
    float r = length(z);
    float a = asin(z.z / r) * power;
    float b = atan(z.y / z.x) * power;
    z = pow(r, power) * vec3(cos(a)*cos(b), cos(a)*sin(b), sin(a));
    return z;
}


float mapBurningShip(vec3 p, float power)
{
    vec3 eps = vec3(exp2(-18. + max(0., floor(log2(length(p))))), 0., 0.);

    vec3 p2 = p + eps.xyz, p3 = p + eps.yxz, p4 = p + eps.yzx;
    vec3 z = p, z2 = p2, z3 = p3, z4 = p4;

    int i = 0;
    float r = length(z);

    for (; i < 20; ++i)
    {
        if (r >= bailOut)
            break;

        z = triplexPow(z, power);
        z += mix(p, juliaC, isJulia);

        z2 = triplexPow(z2, power);
        z2 += mix(p2, juliaC, isJulia);

        z3 = triplexPow(z3, power);
        z3 += mix(p3, juliaC, isJulia);

        z4 = triplexPow(z4, power);
        z4 += mix(p4, juliaC, isJulia);

        r = length(z);
    }

    float dx = length(z2 - z),
        dy = length(z3 - z),
        dz = length(z4 - z);
    float dr = length(vec3(dx, dy, dz) / eps.x);

    return .5 * log(r) * r / dr;
}
